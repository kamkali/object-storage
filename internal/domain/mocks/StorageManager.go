// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kamkalis/object-storage/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StorageManager is an autogenerated mock type for the StorageManager type
type StorageManager struct {
	mock.Mock
}

// SelectNode provides a mock function with given fields: ctx, objectID
func (_m *StorageManager) SelectNode(ctx context.Context, objectID uuid.UUID) (domain.StorageNode, error) {
	ret := _m.Called(ctx, objectID)

	var r0 domain.StorageNode
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.StorageNode); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.StorageNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorageManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorageManager creates a new instance of StorageManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorageManager(t mockConstructorTestingTNewStorageManager) *StorageManager {
	mock := &StorageManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
